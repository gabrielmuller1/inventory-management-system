@page "/editproduct/{id:int}"

@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase
@inject NavigationManager NavigationManager

@attribute [Authorize ( Policy = "Inventory" )]

<h3>Editar Produto</h3>
<br />

@if (this.product != null)
{
    <EditForm Model="product" OnValidSubmit="SaveProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Nome do Produto</label>
            <InputText id="name"
                   @bind-Value="product.ProductName"
                   class="form-control">
            </InputText>
        </div>

        <div class="form-group">
            <label for="quantity">Quantidade</label>
            <InputNumber id="quantity"
                     @bind-Value="product.Quantity"
                     class="form-control">
            </InputNumber>
        </div>

        <div class="form-group">
            <label for="price">Preço</label>
            <InputNumber id="price"
                     @bind-Value="product.Price"
                     class="form-control">
            </InputNumber>
        </div>
        <div class="form-group">
            <label for="invs">Inventário</label>
            <ProductInventoriesComponent Product="this.product"></ProductInventoriesComponent>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Salvar</button>
        <button type="button" class="btn btn-primary" @onclick="Cancel">Cancelar</button>
    </EditForm>
}




@code {
    private Product? product;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync ( )
    {
        this.product = await ViewProductByIdUseCase.ExecuteAsync ( this.Id );
    }

    private async Task SaveProduct ( )
    {
        if (this.product != null)
        {
            await EditProductUseCase.ExecuteAsync ( this.product );
        }
        NavigationManager.NavigateTo ( "/products" );
    }

    private void Cancel ( )
    {
        NavigationManager.NavigateTo ( "/products" );
    }
}
